package com.jmfrei.simpleApp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
// import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jmfrei.simpleApp.User;
import com.jmfrei.simpleApp.UserRepository;

@Controller    // This means that this class is a Controller
// @RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@GetMapping(path="/user/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		System.out.println("user/add::");
		
		User n = new User();
		n.setName(name);
		n.setPassword(password);
		userRepository.save(n);
		return "Saved";
	}
	
	@CrossOrigin(origins="http://localhost:4200")
	@GetMapping(path="/users/add") // Map ONLY GET Requests
	public @ResponseBody User addUser (@RequestParam String name
			, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		System.out.println("users/add::");
		User n = new User();
		n.setName(name);
		n.setPassword(password);
		userRepository.save(n);
		return n;
	}
	
	@CrossOrigin(origins="http://localhost:4200")
	@GetMapping(path="/users")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@CrossOrigin(origins="http://localhost:4200")
	@GetMapping(path="/users/{Id}")
	public @ResponseBody User getUser(@PathVariable("Id") int id) {
		// This returns a JSON or XML with the users
		return userRepository.findOne(id);
	}
}